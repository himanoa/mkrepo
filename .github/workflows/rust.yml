name: Rust

on:
  push:
    branches:
      - master
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+**'
  pull_request:

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: rust-toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable-x86_64-unknown-linux-gnu
        default: true

    - name: rustup component add
      run: rustup component add rustfmt

    - name: cargo fmt -- --check
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check

  build:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
        - stable-x86_64-pc-windows-msvc
        - stable-x86_64-apple-darwin
        - stable-x86_64-unknown-linux-gnu
        include:
        - toolchain: stable-x86_64-pc-windows-msvc
          os: windows-latest
        - toolchain: stable-x86_64-apple-darwin
          os: macOS-latest
        - toolchain: stable-x86_64-unknown-linux-gnu
          os: ubuntu-latest

    name: ${{ matrix.toolchain }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: rust-toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.toolchain }}
        default: true

    - name: rustup component add
      run: rustup component add clippy

    - name: Lint
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --verbose --all --all-targets --all-features -- -D warnings

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose --all --all-targets --all-features

    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose --all --all-targets --all-features

  release:
    strategy:
      fail-fast: false
      matrix:
        target:
        - x86_64-pc-windows-msvc
        - x86_64-apple-darwin
        - x86_64-unknown-linux-gnu
        include:
        - target: x86_64-pc-windows-msvc
          os: windows-latest
        - target: x86_64-apple-darwin
          os: macOS-latest
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-latest

    name: GitHub Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: [rustfmt, build]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: rust-toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable-${{ matrix.target }}
        default: true

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --all-features

    - name: Create an asset
      id: asset
      run: |
        if ${{ contains(matrix.target, 'pc-windows') }}; then
          EXE=.exe
        fi
        EXECUTABLE="./target/release/${GITHUB_REPOSITORY#*/}$EXE"
        ASSET_STEM="${GITHUB_REPOSITORY#*/}-${GITHUB_REF#refs/tags/}-${{ matrix.target }}"
        git archive -o "./$ASSET_STEM.tar" --prefix "$ASSET_STEM/" HEAD
        tar -xf "./$ASSET_STEM.tar"
        mv "$EXECUTABLE" "./$ASSET_STEM/"
        if ${{ contains(matrix.target, 'pc-windows') }}; then
          ASSET="./$ASSET_STEM.zip"
          7z a "$ASSET" "./$ASSET_STEM"
          zipinfo "$ASSET"
        else
          ASSET="./$ASSET_STEM.tar.gz"
          tar -czvf "$ASSET" "./$ASSET_STEM"
        fi
        echo "::set-output name=asset::$ASSET"
      shell: bash

    - name: Upload
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.asset.outputs.asset }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
